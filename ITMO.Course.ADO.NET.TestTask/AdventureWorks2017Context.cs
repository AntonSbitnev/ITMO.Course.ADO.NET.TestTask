// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using WpfEfApp.Models;
using WpfEfApp.Models.Configurations;
namespace WpfEfApp;

public partial class AdventureWorks2017Context : DbContext
{
    public AdventureWorks2017Context()
    {
    }

    public AdventureWorks2017Context(DbContextOptions<AdventureWorks2017Context> options)
        : base(options)
    {
    }

    public virtual DbSet<Address> Address { get; set; }

    public virtual DbSet<AddressType> AddressType { get; set; }

    public virtual DbSet<BusinessEntity> BusinessEntity { get; set; }

    public virtual DbSet<BusinessEntityAddress> BusinessEntityAddress { get; set; }

    public virtual DbSet<BusinessEntityContact> BusinessEntityContact { get; set; }

    public virtual DbSet<ContactType> ContactType { get; set; }

    public virtual DbSet<CountryRegion> CountryRegion { get; set; }

    public virtual DbSet<EmailAddress> EmailAddress { get; set; }

    public virtual DbSet<Password> Password { get; set; }

    public virtual DbSet<Person> Person { get; set; }

    public virtual DbSet<PersonPhone> PersonPhone { get; set; }

    public virtual DbSet<PhoneNumberType> PhoneNumberType { get; set; }

    public virtual DbSet<StateProvince> StateProvince { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    {

        base.OnConfiguring(optionsBuilder);
    }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.UseCollation("SQL_Latin1_General_CP1_CI_AS");

            modelBuilder.ApplyConfiguration(new AddressConfiguration());
            modelBuilder.ApplyConfiguration(new AddressTypeConfiguration());
            modelBuilder.ApplyConfiguration(new BusinessEntityConfiguration());
            modelBuilder.ApplyConfiguration(new BusinessEntityAddressConfiguration());
            modelBuilder.ApplyConfiguration(new BusinessEntityContactConfiguration());
            modelBuilder.ApplyConfiguration(new ContactTypeConfiguration());
            modelBuilder.ApplyConfiguration(new CountryRegionConfiguration());
            modelBuilder.ApplyConfiguration(new EmailAddressConfiguration());
            modelBuilder.ApplyConfiguration(new PasswordConfiguration());
            modelBuilder.ApplyConfiguration(new PersonConfiguration());
            modelBuilder.ApplyConfiguration(new PersonPhoneConfiguration());
            modelBuilder.ApplyConfiguration(new PhoneNumberTypeConfiguration());
            modelBuilder.ApplyConfiguration(new StateProvinceConfiguration());
        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}
